package com.example.pc.updata.bmob;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_FRAMENT2".
*/
public class NoteFrament2Dao extends AbstractDao<NoteFrament2, Long> {

    public static final String TABLENAME = "NOTE_FRAMENT2";

    /**
     * Properties of entity NoteFrament2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titel = new Property(1, String.class, "titel", false, "TITEL");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Img = new Property(3, String.class, "img", false, "IMG");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property BindId = new Property(6, String.class, "bindId", false, "BIND_ID");
        public final static Property BindUserId = new Property(7, String.class, "bindUserId", false, "BIND_USER_ID");
        public final static Property ObjectId = new Property(8, String.class, "objectId", false, "OBJECT_ID");
        public final static Property CreatedAt = new Property(9, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(10, String.class, "updatedAt", false, "UPDATED_AT");
    }


    public NoteFrament2Dao(DaoConfig config) {
        super(config);
    }
    
    public NoteFrament2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_FRAMENT2\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITEL\" TEXT," + // 1: titel
                "\"DATE\" INTEGER," + // 2: date
                "\"IMG\" TEXT," + // 3: img
                "\"CONTENT\" TEXT," + // 4: content
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"BIND_ID\" TEXT," + // 6: bindId
                "\"BIND_USER_ID\" TEXT," + // 7: bindUserId
                "\"OBJECT_ID\" TEXT," + // 8: objectId
                "\"CREATED_AT\" TEXT," + // 9: createdAt
                "\"UPDATED_AT\" TEXT);"); // 10: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_FRAMENT2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteFrament2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titel = entity.getTitel();
        if (titel != null) {
            stmt.bindString(2, titel);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getType());
 
        String bindId = entity.getBindId();
        if (bindId != null) {
            stmt.bindString(7, bindId);
        }
 
        String bindUserId = entity.getBindUserId();
        if (bindUserId != null) {
            stmt.bindString(8, bindUserId);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(9, objectId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(10, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(11, updatedAt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteFrament2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titel = entity.getTitel();
        if (titel != null) {
            stmt.bindString(2, titel);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getType());
 
        String bindId = entity.getBindId();
        if (bindId != null) {
            stmt.bindString(7, bindId);
        }
 
        String bindUserId = entity.getBindUserId();
        if (bindUserId != null) {
            stmt.bindString(8, bindUserId);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(9, objectId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(10, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(11, updatedAt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoteFrament2 readEntity(Cursor cursor, int offset) {
        NoteFrament2 entity = new NoteFrament2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titel
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bindId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bindUserId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // objectId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createdAt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updatedAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteFrament2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setBindId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBindUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setObjectId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedAt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatedAt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoteFrament2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoteFrament2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteFrament2 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
